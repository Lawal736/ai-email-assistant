#!/usr/bin/env python3
"""
Deployment Environment Setup Script
This script helps you set up your environment variables for deployment.
"""

import os
import secrets
import string

def generate_secret_key(length=50):
    """Generate a secure secret key"""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def create_env_file():
    """Create a .env file with all required variables"""
    
    print("üöÄ AI Email Assistant - Deployment Environment Setup")
    print("=" * 60)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        response = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    print("\nüìù Please provide the following information:")
    print("(Press Enter to skip optional fields)\n")
    
    # Collect environment variables
    env_vars = {}
    
    # Flask Configuration
    print("üîß FLASK CONFIGURATION")
    env_vars['FLASK_ENV'] = 'production'
    env_vars['FLASK_DEBUG'] = '0'
    env_vars['SECRET_KEY'] = generate_secret_key()
    env_vars['PORT'] = input("Port (default: 5001): ").strip() or '5001'
    env_vars['HOST'] = '0.0.0.0'
    
    print(f"‚úÖ Generated SECRET_KEY: {env_vars['SECRET_KEY'][:20]}...")
    
    # AI API Configuration
    print("\nü§ñ AI API CONFIGURATION")
    env_vars['ANTHROPIC_API_KEY'] = input("Anthropic API Key: ").strip()
    env_vars['OPENAI_API_KEY'] = input("OpenAI API Key: ").strip()
    
    # AI Model Configuration
    env_vars['COMPLEXITY_THRESHOLD'] = '500'
    env_vars['USE_HAIKU_FOR_SIMPLE'] = 'true'
    env_vars['USE_SONNET_FOR_COMPLEX'] = 'true'
    env_vars['FALLBACK_TO_OPENAI'] = 'true'
    
    # Google OAuth Configuration
    print("\nüîê GOOGLE OAUTH CONFIGURATION")
    env_vars['GOOGLE_CLIENT_ID'] = input("Google Client ID: ").strip()
    env_vars['GOOGLE_CLIENT_SECRET'] = input("Google Client Secret: ").strip()
    
    # Payment Processing
    print("\nüí≥ PAYMENT PROCESSING")
    env_vars['PAYSTACK_SECRET_KEY'] = input("Paystack Secret Key: ").strip()
    env_vars['PAYSTACK_PUBLIC_KEY'] = input("Paystack Public Key: ").strip()
    env_vars['STRIPE_SECRET_KEY'] = input("Stripe Secret Key (optional): ").strip()
    env_vars['STRIPE_PUBLIC_KEY'] = input("Stripe Public Key (optional): ").strip()
    
    # Cryptocurrency (Optional)
    print("\n‚Çø CRYPTOCURRENCY PAYMENTS (Optional)")
    env_vars['INFURA_URL'] = input("Infura URL (optional): ").strip()
    
    # Database Configuration
    print("\nüóÑÔ∏è  DATABASE CONFIGURATION")
    env_vars['DATABASE_URL'] = 'sqlite:///users.db'
    
    # Security & SSL
    print("\nüîí SECURITY & SSL")
    env_vars['SSL_VERIFY'] = 'true'
    env_vars['SECURE_COOKIES'] = 'true'
    
    # Logging & Monitoring
    print("\nüìä LOGGING & MONITORING")
    env_vars['LOG_LEVEL'] = 'INFO'
    env_vars['ENABLE_DEBUG_LOGGING'] = 'false'
    
    # Deployment Specific
    print("\nüåê DEPLOYMENT SPECIFIC")
    base_url = input("Base URL (e.g., https://your-app.railway.app): ").strip()
    env_vars['BASE_URL'] = base_url or 'https://your-app-domain.com'
    
    # Optional Configurations
    print("\n‚öôÔ∏è  OPTIONAL CONFIGURATIONS")
    env_vars['FILTER_SOCIAL_MEDIA'] = 'true'
    env_vars['FILTER_AUTOMATED_EMAILS'] = 'true'
    env_vars['FILTER_NEWSLETTERS'] = 'true'
    env_vars['MAX_EMAILS_PER_ANALYSIS'] = '50'
    env_vars['EMAIL_ANALYSIS_TIMEOUT'] = '300'
    
    # Create .env file
    print("\nüìÑ Creating .env file...")
    
    env_content = """# =============================================================================
# AI Email Assistant - Environment Configuration
# =============================================================================
# Generated by setup_deployment_env.py
# DO NOT commit this file to version control

"""
    
    # Add Flask Configuration
    env_content += "# =============================================================================\n"
    env_content += "# FLASK CONFIGURATION\n"
    env_content += "# =============================================================================\n"
    for key in ['FLASK_ENV', 'FLASK_DEBUG', 'SECRET_KEY', 'PORT', 'HOST']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Add AI API Configuration
    env_content += "\n# =============================================================================\n"
    env_content += "# AI API CONFIGURATION\n"
    env_content += "# =============================================================================\n"
    for key in ['ANTHROPIC_API_KEY', 'OPENAI_API_KEY', 'COMPLEXITY_THRESHOLD', 
                'USE_HAIKU_FOR_SIMPLE', 'USE_SONNET_FOR_COMPLEX', 'FALLBACK_TO_OPENAI']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Add Google OAuth Configuration
    env_content += "\n# =============================================================================\n"
    env_content += "# GOOGLE OAUTH CONFIGURATION\n"
    env_content += "# =============================================================================\n"
    for key in ['GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Add Payment Processing
    env_content += "\n# =============================================================================\n"
    env_content += "# PAYMENT PROCESSING\n"
    env_content += "# =============================================================================\n"
    for key in ['PAYSTACK_SECRET_KEY', 'PAYSTACK_PUBLIC_KEY', 'STRIPE_SECRET_KEY', 'STRIPE_PUBLIC_KEY']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Add Cryptocurrency
    env_content += "\n# =============================================================================\n"
    env_content += "# CRYPTOCURRENCY PAYMENTS\n"
    env_content += "# =============================================================================\n"
    env_content += f"INFURA_URL={env_vars['INFURA_URL']}\n"
    
    # Add Database Configuration
    env_content += "\n# =============================================================================\n"
    env_content += "# DATABASE CONFIGURATION\n"
    env_content += "# =============================================================================\n"
    env_content += f"DATABASE_URL={env_vars['DATABASE_URL']}\n"
    
    # Add Security & SSL
    env_content += "\n# =============================================================================\n"
    env_content += "# SECURITY & SSL\n"
    env_content += "# =============================================================================\n"
    for key in ['SSL_VERIFY', 'SECURE_COOKIES']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Add Logging & Monitoring
    env_content += "\n# =============================================================================\n"
    env_content += "# LOGGING & MONITORING\n"
    env_content += "# =============================================================================\n"
    for key in ['LOG_LEVEL', 'ENABLE_DEBUG_LOGGING']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Add Deployment Specific
    env_content += "\n# =============================================================================\n"
    env_content += "# DEPLOYMENT SPECIFIC\n"
    env_content += "# =============================================================================\n"
    env_content += f"BASE_URL={env_vars['BASE_URL']}\n"
    
    # Add Optional Configurations
    env_content += "\n# =============================================================================\n"
    env_content += "# OPTIONAL CONFIGURATIONS\n"
    env_content += "# =============================================================================\n"
    for key in ['FILTER_SOCIAL_MEDIA', 'FILTER_AUTOMATED_EMAILS', 'FILTER_NEWSLETTERS',
                'MAX_EMAILS_PER_ANALYSIS', 'EMAIL_ANALYSIS_TIMEOUT']:
        env_content += f"{key}={env_vars[key]}\n"
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ .env file created successfully!")
    
    # Create deployment instructions
    print("\nüìã DEPLOYMENT INSTRUCTIONS:")
    print("=" * 60)
    print("1. Copy the contents of .env to your deployment platform:")
    print("   - Railway: Add as environment variables in dashboard")
    print("   - Heroku: Use 'heroku config:set KEY=VALUE'")
    print("   - DigitalOcean: Add in App Platform environment variables")
    
    print("\n2. Required files for deployment:")
    print("   ‚úÖ .env (created)")
    print("   ‚úÖ requirements.txt")
    print("   ‚úÖ Procfile")
    print("   ‚úÖ runtime.txt")
    print("   ‚ö†Ô∏è  credentials.json (Google OAuth - add to deployment)")
    
    print("\n3. Google OAuth Setup:")
    print("   - Add your deployment URL to authorized redirect URIs")
    print("   - Format: https://your-app-domain.com/oauth2callback")
    
    print("\n4. Test your deployment:")
    print("   - Visit your app URL")
    print("   - Test Gmail connection")
    print("   - Test payment processing")
    
    print("\nüéâ Setup complete! You're ready to deploy.")

if __name__ == "__main__":
    create_env_file() 