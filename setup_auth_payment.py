#!/usr/bin/env python3
"""
Setup script for AI Email Assistant with Authentication and Payment System
This script helps configure the application with proper environment variables and database setup.
"""

import os
import sys
import secrets
import string
from pathlib import Path
from dotenv import load_dotenv

def print_header():
    """Print setup header"""
    print("=" * 60)
    print("üîê AI Email Assistant - Auth & Payment Setup")
    print("=" * 60)
    print()

def check_python_version():
    """Check Python version"""
    print("üêç Checking Python version...")
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 or higher is required")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detected")
    print()

def check_dependencies():
    """Check required dependencies"""
    print("üì¶ Checking dependencies...")
    
    required_packages = [
        'flask', 'stripe', 'sqlite3', 'openai', 'google-auth',
        'python-dotenv', 'requests', 'Werkzeug'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sqlite3':
                import sqlite3
            else:
                __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - Missing")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Missing packages: {', '.join(missing_packages)}")
        print("Run: pip install -r requirements.txt")
        return False
    
    print("‚úÖ All dependencies installed")
    print()
    return True

def setup_environment():
    """Setup environment variables"""
    print("üîß Setting up environment variables...")
    
    env_file = '.env'
    env_vars = {}
    
    # Load existing .env file
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print("üìÑ Existing .env file found")
    
    # Required environment variables
    required_vars = {
        'SECRET_KEY': {
            'description': 'Flask secret key for session management',
            'default': 'your-super-secret-key-change-this-in-production',
            'required': True
        },
        'STRIPE_SECRET_KEY': {
            'description': 'Stripe secret key for payment processing',
            'default': '',
            'required': True
        },
        'STRIPE_PUBLIC_KEY': {
            'description': 'Stripe public key for frontend',
            'default': '',
            'required': True
        },
        'STRIPE_WEBHOOK_SECRET': {
            'description': 'Stripe webhook secret for payment verification',
            'default': '',
            'required': False
        },
        'BASE_URL': {
            'description': 'Base URL for your application',
            'default': 'http://localhost:5001',
            'required': False
        },
        'OPENAI_API_KEY': {
            'description': 'OpenAI API key for AI features',
            'default': '',
            'required': False
        },
        'ANTHROPIC_API_KEY': {
            'description': 'Anthropic API key for Claude models',
            'default': '',
            'required': False
        }
    }
    
    print("\nüìù Environment Variables Setup:")
    print("-" * 40)
    
    for var_name, config in required_vars.items():
        current_value = os.getenv(var_name, config['default'])
        
        print(f"\nüîπ {var_name}")
        print(f"   Description: {config['description']}")
        
        if current_value and current_value != config['default']:
            print(f"   Current value: {current_value[:20]}{'...' if len(current_value) > 20 else ''}")
            use_current = input("   Use current value? (y/n): ").lower().strip()
            if use_current == 'y':
                env_vars[var_name] = current_value
                continue
        
        if config['required']:
            new_value = input(f"   Enter value (required): ").strip()
            if not new_value:
                print(f"‚ùå {var_name} is required!")
                continue
        else:
            new_value = input(f"   Enter value (optional, press Enter to skip): ").strip()
            if not new_value:
                new_value = config['default']
        
        env_vars[var_name] = new_value
    
    # Write to .env file
    with open(env_file, 'w') as f:
        f.write("# AI Email Assistant Environment Variables\n")
        f.write("# Generated by setup script\n\n")
        
        for var_name, value in env_vars.items():
            f.write(f"{var_name}={value}\n")
    
    print(f"\n‚úÖ Environment variables saved to {env_file}")
    print()

def setup_database():
    """Setup database"""
    print("üóÑÔ∏è Setting up database...")
    
    try:
        from models import DatabaseManager
        
        db_manager = DatabaseManager()
        print("‚úÖ Database initialized successfully")
        
        # Test database connection
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM subscription_plans")
        plan_count = cursor.fetchone()[0]
        conn.close()
        
        print(f"‚úÖ Database connection test successful ({plan_count} subscription plans found)")
        
    except Exception as e:
        print(f"‚ùå Database setup failed: {e}")
        return False
    
    print()
    return True

def setup_stripe():
    """Setup Stripe configuration"""
    print("üí≥ Setting up Stripe...")
    
    stripe_secret = os.getenv('STRIPE_SECRET_KEY')
    stripe_public = os.getenv('STRIPE_PUBLIC_KEY')
    
    if not stripe_secret or not stripe_public:
        print("‚ö†Ô∏è Stripe keys not configured. Payment features will be limited.")
        print("   To enable payments:")
        print("   1. Create a Stripe account at https://stripe.com")
        print("   2. Get your API keys from the Stripe dashboard")
        print("   3. Update your .env file with the keys")
        print("   4. Create subscription products in Stripe dashboard")
        return False
    
    try:
        import stripe
        stripe.api_key = stripe_secret
        
        # Test Stripe connection
        account = stripe.Account.retrieve()
        print(f"‚úÖ Stripe connected successfully (Account: {account.id})")
        
        # Check for subscription products
        products = stripe.Product.list(limit=10)
        if products.data:
            print(f"‚úÖ Found {len(products.data)} products in Stripe")
        else:
            print("‚ö†Ô∏è No products found in Stripe. Create subscription products:")
            print("   - Free plan (price: $0)")
            print("   - Pro plan (price: $9.99/month)")
            print("   - Enterprise plan (price: $29.99/month)")
        
    except Exception as e:
        print(f"‚ùå Stripe setup failed: {e}")
        return False
    
    print()
    return True

def create_sample_data():
    """Create sample data for testing"""
    print("üìä Creating sample data...")
    
    try:
        from models import DatabaseManager, User, SubscriptionPlan
        
        db_manager = DatabaseManager()
        user_model = User(db_manager)
        plan_model = SubscriptionPlan(db_manager)
        
        # Create a test user
        test_user_id = user_model.create_user(
            email='test@example.com',
            password='testpassword123',
            first_name='Test',
            last_name='User'
        )
        
        if test_user_id:
            print("‚úÖ Test user created (test@example.com / testpassword123)")
        else:
            print("‚ö†Ô∏è Test user already exists")
        
        # Check subscription plans
        plans = plan_model.get_all_plans()
        print(f"‚úÖ {len(plans)} subscription plans available")
        
    except Exception as e:
        print(f"‚ùå Sample data creation failed: {e}")
        return False
    
    print()
    return True

def print_next_steps():
    """Print next steps for the user"""
    print("üéâ Setup Complete!")
    print("=" * 60)
    print()
    print("üìã Next Steps:")
    print("1. Start the application: python app.py")
    print("2. Visit http://localhost:5001")
    print("3. Create your account or use test account:")
    print("   - Email: test@example.com")
    print("   - Password: testpassword123")
    print("4. Connect your Gmail account")
    print("5. Test the AI features")
    print()
    print("üîß Additional Configuration:")
    print("- Update Stripe webhook endpoint in your Stripe dashboard")
    print("- Configure Gmail API credentials (credentials.json)")
    print("- Set up production environment variables")
    print()
    print("üìö Documentation:")
    print("- Check README.md for detailed setup instructions")
    print("- Visit /pricing to see subscription plans")
    print("- Use /account to manage your subscription")
    print()

def generate_secret_key(length=32):
    """Generate a secure secret key"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def create_env_file():
    """Create .env file with required environment variables"""
    env_content = """# AI Email Assistant Environment Configuration

# Flask Configuration
SECRET_KEY={secret_key}

# Database Configuration
DATABASE_URL=sqlite:///ai_email_assistant.db

# Gmail API Configuration
GMAIL_CLIENT_ID=your_gmail_client_id_here
GMAIL_CLIENT_SECRET=your_gmail_client_secret_here

# OpenAI API Configuration
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Configuration (for Claude models)
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Stripe Payment Configuration
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret_here

# Web3 Configuration (for crypto payments)
INFURA_URL=https://mainnet.infura.io/v3/your_infura_project_id_here
# Alternative providers:
# ALCHEMY_URL=https://eth-mainnet.g.alchemy.com/v2/your_alchemy_key_here
# QUICKNODE_URL=https://your_quicknode_endpoint_here

# USDT Contract Address (ERC20 on Ethereum Mainnet)
USDT_CONTRACT_ADDRESS=0x75Fc169eD2832e33F74D31430249e09c09358A75

# Application Settings
FLASK_ENV=development
DEBUG=True
PORT=5001
""".format(secret_key=generate_secret_key())

    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Created .env file with environment variables")

def create_database():
    """Initialize the database with required tables"""
    try:
        from models import DatabaseManager
        
        db_manager = DatabaseManager()
        db_manager.create_tables()
        
        # Create default subscription plans
        from models import SubscriptionPlan
        plan_model = SubscriptionPlan(db_manager)
        
        plans = [
            {
                'name': 'free',
                'price_monthly': 0.0,
                'price_yearly': 0.0,
                'email_limit': 50,
                'features': [
                    'Basic email analysis',
                    'Daily summaries',
                    'Action item extraction',
                    'Email limit: 50/month'
                ]
            },
            {
                'name': 'pro',
                'price_monthly': 19.99,
                'price_yearly': 199.99,
                'email_limit': 1000,
                'features': [
                    'Advanced AI analysis',
                    'Unlimited summaries',
                    'Priority support',
                    'Email limit: 1,000/month',
                    'Document analysis',
                    'Thread analysis'
                ]
            },
            {
                'name': 'enterprise',
                'price_monthly': 49.99,
                'price_yearly': 499.99,
                'email_limit': 10000,
                'features': [
                    'Enterprise-grade AI',
                    'Unlimited everything',
                    '24/7 support',
                    'Email limit: 10,000/month',
                    'Advanced analytics',
                    'Custom integrations',
                    'Team management'
                ]
            }
        ]
        
        for plan in plans:
            plan_model.create_plan(**plan)
        
        print("‚úÖ Database initialized with default plans")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Database initialization failed: {e}")

def setup_crypto():
    """Guide user through crypto payment setup"""
    print("\nüîß Crypto Payment Setup:")
    print("1. Choose a Web3 provider:")
    print("   - Infura: https://infura.io/ (recommended)")
    print("   - Alchemy: https://alchemy.com/")
    print("   - QuickNode: https://quicknode.com/")
    print("2. Create a project and get your endpoint URL")
    print("3. Update the .env file with your provider URL")
    print("4. USDT contract address is already configured")
    print("5. For production, consider using a dedicated wallet")

def setup_gmail():
    """Guide user through Gmail API setup"""
    print("\nüîß Gmail API Setup:")
    print("1. Go to https://console.cloud.google.com/")
    print("2. Create a new project or select existing")
    print("3. Enable Gmail API")
    print("4. Go to Credentials > Create Credentials > OAuth 2.0 Client IDs")
    print("5. Set application type to 'Web application'")
    print("6. Add authorized redirect URIs:")
    print("   - http://localhost:5001/oauth2callback (development)")
    print("   - https://yourdomain.com/oauth2callback (production)")
    print("7. Copy Client ID and Client Secret to .env file")

def setup_ai_apis():
    """Guide user through AI API setup"""
    print("\nüîß AI API Setup:")
    print("OpenAI API:")
    print("1. Go to https://platform.openai.com/api-keys")
    print("2. Create a new API key")
    print("3. Copy the key to OPENAI_API_KEY in .env")
    print("\nAnthropic API (Claude):")
    print("1. Go to https://console.anthropic.com/")
    print("2. Create an account and get your API key")
    print("3. Copy the key to ANTHROPIC_API_KEY in .env")

def main():
    """Main setup function"""
    print_header()
    
    # Check Python version
    check_python_version()
    
    # Check dependencies
    if not check_dependencies():
        print("‚ùå Please install missing dependencies and try again")
        sys.exit(1)
    
    # Setup environment
    setup_environment()
    
    # Setup database
    if not setup_database():
        print("‚ùå Database setup failed")
        sys.exit(1)
    
    # Setup Stripe
    setup_stripe()
    
    # Create sample data
    create_sample_data()
    
    # Print next steps
    print_next_steps()

    # Check if .env file exists
    if not os.path.exists('.env'):
        print("üìù Creating .env file...")
        create_env_file()
    else:
        print("‚úÖ .env file already exists")
    
    # Initialize database
    print("\nüóÑÔ∏è Initializing database...")
    create_database()
    
    # Setup guides
    print("\n" + "=" * 50)
    print("üìã Setup Instructions:")
    
    setup_gmail()
    setup_ai_apis()
    setup_crypto()
    
    print("\n" + "=" * 50)
    print("üéâ Setup Complete!")
    print("\nNext steps:")
    print("1. Update .env file with your API keys")
    print("2. Run: python app.py")
    print("3. Visit: http://localhost:5001")
    print("\nFor production deployment:")
    print("1. Set FLASK_ENV=production")
    print("2. Use a production WSGI server (gunicorn)")
    print("3. Set up SSL certificates")
    print("4. Configure proper domain and redirect URIs")

if __name__ == '__main__':
    main() 